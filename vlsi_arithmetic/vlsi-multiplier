#!/usr/bin/python3

import sys
import math
import argparse

from amaranth.back import verilog

from vlsi_arithmetic.adder import BrentKung, KoggeStone, HanCarlson, Inferred
from vlsi_arithmetic.multiplier import Multiplier, BoothRadix4, LongMultiplication, Dadda
from vlsi_arithmetic.tech.Tech import Tech


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Create Verilog Multiplier')

    parser.add_argument('--bits', type=int,
                        help='Width in bits of adder', default=32)

    parser.add_argument('--multiply-add', action='store_true',
                        help='Multiply add (a*b+c)')

    parser.add_argument('--register-input', action='store_true',
                        help='Add a register stage to the input')

    parser.add_argument('--register-post-ppg', action='store_true',
                        help='Add a register stage in between partial product '
                             'generation and partial product accumulation')

    parser.add_argument('--register-post-ppa', action='store_true',
                        help='Add a register stage in between partial product '
                             'accumulation and final addition')

    parser.add_argument('--register-output', action='store_true',
                        help='Add a register stage to the output')

    parser.add_argument('--powered', action='store_true',
                        help='Add power pins (eg VPWR/VGND)')

    parser.add_argument('--tech',
                        help='What technology to build for (none (default), sky130hd, asap7, gf180mcu)')

    parser.add_argument('--algorithm',
                        help='Adder algorithm (brentkung (default), koggestone, hancarlson, inferred)')

    parser.add_argument('--output', type=argparse.FileType('w'), default=sys.stdout,
                        help='Write output to this file')

    args = parser.parse_args()

    try:
        t = Tech()
        tech = t.get_tech(args.tech)
    except:
        print("Unknown technology")
        exit(1)


    algorithm = BrentKung
    if args.algorithm:
        if args.algorithm.lower() == 'brentkung':
            algorithm = BrentKung
        elif args.algorithm.lower() == 'koggestone':
            algorithm = KoggeStone
        elif args.algorithm.lower() == 'hancarlson':
            algorithm = HanCarlson
        elif args.algorithm.lower() == 'inferred':
            algorithm = Inferred
        else:
            print("Unknown algorithm")
            exit(1)

    class mymultiplier(Multiplier, BoothRadix4, Dadda, tech):
        pass

    class myadder(algorithm, tech):
        pass

    multiplier = mymultiplier(bits=args.bits, adder=myadder, multiply_add=args.multiply_add,
                              register_input=args.register_input,
                              register_post_ppg=args.register_post_ppg,
                              register_post_ppa=args.register_post_ppa,
                              register_output=args.register_output,
                              powered=args.powered)

    ports = [multiplier.a, multiplier.b, multiplier.o]
    name = 'multiplier'
    if args.multiply_add:
        ports.append(multiplier.c)
        name = 'multiply_adder'
    if args.powered:
        ports.extend([multiplier.VPWR, multiplier.VGND])

    args.output.write(verilog.convert(multiplier, ports=ports, name=name, strip_internal_attrs=True))
