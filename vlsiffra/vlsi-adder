#!/usr/bin/python3

import sys
import argparse

from amaranth.back import verilog

from vlsiffra.adder import BrentKung, KoggeStone, HanCarlson, Inferred
from vlsiffra.tech.Tech import Tech


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Create Verilog Adder')

    parser.add_argument('--bits', type=int,
                        help='Width in bits of adder', default=32)

    parser.add_argument('--register-input', action='store_true',
                        help='Add a register stage to the input')

    parser.add_argument('--register-output', action='store_true',
                        help='Add a register stage to the output')

    parser.add_argument('--tech',
                        help='What technology to build for, (none (default), sky130hd, asap7, gf180mcu)')

    parser.add_argument('--algorithm',
                        help='Adder algorithm (brentkung (default), koggestone, hancarlson, inferred)')

    parser.add_argument('--powered', action='store_true',
                        help='Add power pins (eg VPWR/VGND)')

    parser.add_argument('--output', type=argparse.FileType('w'), default=sys.stdout,
                        help='Write output to this file')

    args = parser.parse_args()

    try:
        t = Tech()
        tech = t.get_tech(args.tech)
    except:
        print("Unknown technology")
        exit(1)

    algorithm = BrentKung
    if args.algorithm:
        if args.algorithm.lower() == 'brentkung':
            algorithm = BrentKung
        elif args.algorithm.lower() == 'koggestone':
            algorithm = KoggeStone
        elif args.algorithm.lower() == 'hancarlson':
            algorithm = HanCarlson
        elif args.algorithm.lower() == 'inferred':
            algorithm = Inferred
        else:
            print("Unknown algorithm")
            exit(1)

    class myadder(tech, algorithm):
        pass

    adder = myadder(bits=args.bits, register_input=args.register_input,
                    register_output=args.register_output, powered=args.powered)

    ports = [adder.a, adder.b, adder.o]
    if args.powered:
        ports.extend([adder.VPWR, adder.VGND])

    args.output.write(verilog.convert(adder, ports=ports, name='adder', strip_internal_attrs=True))
